[
 { 
   "connectionName": "devDcStats",
   "query1": ["select id, name from prod_product_template_group ",
              " where id in (%d, %d, %d)"
   ]
 },
 {
   "connectionName": "qaDcStats",
   "dailyRollup": ["select * from dc_stats_daily_rollup ",
                   "where acct_id = %d and stats_date >= '%s' and stats_date < '%s'"
   ]
 },
 {
   "_comments": "This is postgres db where webstats reporting tool access. ",
   "connectionName": "hadoopStats",

   "_comments": "This is used in product tab. ",
   "domainProductList": [
      "select distinct domain, name as product from product_template_group"
   ],

   "_comments": "This is used in product tab. ",
   "productList": [
      "select distinct name as product from product_template_group"
   ],

   "_comments": "This is used for quick search of account Id or name that have stats. ",
   "accountList": [
      "select account_id, account_name from account_has_stats"
   ],

   "_comments": " get monthly stats for given domain withing date range",
   "domainMonthlyStats": [

      " select p.month, ",
      "   max(case when p.category = 'Documents' then p.count else null end) as Document, ",
      "   max(case when p.category = 'Media' then p.count else null end) as Media, ",
      "   max(case when p.category = 'Queries' then p.count else null end) as Queries, ",
      "   max(case when p.category = 'Workspace' then p.count else null end) as Workspace, ",
      "   sum(p.count) as TotalPageView ",
      " from ",
      " ( ",
      "   SELECT ptg.name as name , regexp_replace(cast(t.stats_date as text), '00.*$', '') as month ",
      "          , c.name category, sum(t.stat_count) as count ",
      "   FROM dc_stats_monthly_rollup t, product_template_group ptg, url_mapping m, web_stats_category c ",
      "   where  ",
      "   t.stats_date between date_trunc('month', date '%s') and ", 
      "     date( date_trunc('month', date '%s') + '1month' ) - integer '1'",
      "   and t.product_template_id != -1 and t.acct_id != -1",
      "   and ptg.id = t.product_template_id ",
      "   and t.url_mapping_id = m.id ",
      "   and m.category_id = c.id ",
      "   and ptg.domain = '%s'",
      "   group by ptg.name, t.stats_date, c.name ",
      " ) p ",
      " group by p.month ",
      " order by p.month "
   ],

   "_comments": "Query for comparing year-over-year month stats of a given domain ",
   "yearOverYearDomainMonthly": [
      " select dt.year, dt.month, coalesce(Document,0) as document ",
      "        , coalesce(Media,0) as media ",
      "        , coalesce(Queries,0) as queries ",
      "        , coalesce(Workspace,0) as workspace ",
      " FROM ",
      " ( ",
      "   select yr.year, mn.month ",
      "   from ",
      "   ( ",
      "       SELECT distinct regexp_replace(cast(t.stats_date as text), '-[0-9]{2}-.*$', '') as year ",
      "       FROM dc_stats_monthly_rollup t, product_template_group ptg ",
      "       where  ",
      "       t.stats_date >= '%s' and t.stats_date < '%s' ",
      "       and t.product_template_id != -1 ",
      "       and ptg.id = t.product_template_id and t.acct_id != -1",
      "       and ptg.domain = '%s') yr, ",
      "   (  SELECT '01' as month union ",
      "      select '02' as month union ",
      "      select '03' as month union ",
      "      select '04' as month union ",
      "      select '05' as month union ",
      "      select '06' as month union ",
      "      select '07' as month union ",
      "      select '08' as month union ",
      "      select '09' as month union ",
      "      select '10' as month union ",
      "      select '11' as month union ",
      "      select '12' as month) mn ",
      " ) dt ",
      " left outer join ",
      " ( ",
      "   select regexp_replace(regexp_replace(q.month, '[0-9]{4}-', ''), '-[0-9]{2}.*', '') as month, ",
      "          regexp_replace(q.month, '-[0-9]{2}-.*$', '') as year, ",
      "          q.Document, q.Media, q.Queries, q.Workspace ",
      "   FROM ",
      "   ( ",
      "     select p.month, ",
      "       max(case when p.category = 'Documents' then p.count else 0 end) as Document, ",
      "       max(case when p.category = 'Media' then p.count else 0 end) as Media, ",
      "       max(case when p.category = 'Queries' then p.count else 0 end) as Queries, ",
      "       max(case when p.category = 'Workspace' then p.count else 0 end) as Workspace ",
      "     from ",
      "     ( ",
      "       SELECT ptg.name as name , regexp_replace(cast(t.stats_date as text), '00.*$', '') as month ",
      "              , c.name category, sum(t.stat_count) as count ",
      "       FROM dc_stats_monthly_rollup t, product_template_group ptg, url_mapping m, web_stats_category c ",
      "       where  ",
      "       t.stats_date >= '%s' and t.stats_date < '%s' ",
      "       and t.product_template_id != -1 ",
      "       and ptg.id = t.product_template_id and t.acct_id != -1",
      "       and t.url_mapping_id = m.id ",
      "       and m.category_id = c.id ",
      "       and ptg.domain = '%s' ",
      "       group by ptg.name, t.stats_date, c.name ",
      "     ) p ",
      "     group by p.month ",
      "   ) q ",
      " ) stats on (stats.month = dt.month and stats.year = dt.year) ",
      " order by dt.year, dt.month "

   ],

   "_comments": " get monthly stats for given product withing date range",
   "productMonthlyStats": [
      " select p.month,  ",
      "   max(case when p.category = 'Documents' then p.count else null end) as Document,  ",
      "   max(case when p.category = 'Media' then p.count else null end) as Media,  ",
      "   max(case when p.category = 'Queries' then p.count else null end) as Queries,  ",
      "   max(case when p.category = 'Workspace' then p.count else null end) as Workspace,  ",
      "   sum(p.count) as TotalPageView  ",
      " from  ",
      " (  ",
      "   SELECT ptg.name as name , regexp_replace(cast(t.stats_date as text), '00.*$', '') as month  ",
      "          , c.name category, sum(t.stat_count) as count  ",
      "   FROM dc_stats_monthly_rollup t, product_template_group ptg, url_mapping m, web_stats_category c  ",
      "   where   ",
      "   t.stats_date >= '%s' and t.stats_date < '%s' ",
      "   and t.product_template_id != -1 and t.acct_id != -1",
      "   and ptg.id = t.product_template_id  ",
      "   and t.url_mapping_id = m.id  ",
      "   and m.category_id = c.id  ",
      "   and ptg.name = '%s' ",
      "   group by ptg.name, t.stats_date, c.name  ",
      " ) p  ",
      " group by p.month  ",
      " order by p.month "
   ],

   "_comments": "Get unique account ID + account name. Note: 4800346 records.",
   "boatAccount": [
      "select distinct acct_id as account_id, account_name from boat_account"
   ],

   "_comments": "Get account name for given ID.",
   "boatAccountName": [
      "select distinct account_name from boat_account where acct_id = %d"
   ],

   "_comments": "Get account name for given list of IDs.",
   "boatAccountNameInList": [
      "select distinct acct_id, account_name from boat_account where acct_id in (%s)"
   ],


   "_comments": "Get unique account ID + account name for given partitial ID.",
   "boatAccountOnId": [
      " select distinct acct_id as account_id, account_name from boat_account ",
      " where cast(acct_id as text) like %s order by account_id limit %d"
   ],

   "_comments": "Get unique account ID + account name for given partitial ID from account that have stats table.",
   "accountHaveStatsOnId": [
      " select account_id, account_name from account_has_stats ",
      " where cast(account_id as text) like %s order by account_id"
   ],

   "_comments": "Get unique account ID + account name for given partital account name",
   "boatAccountOnName": [
      " select distinct acct_id as account_id, account_name, char_length(account_name) as len from boat_account ",
      " where lower(account_name) like %s order by char_length(account_name) limit %d"
   ],

   "_comments": "Get unique account ID + account name for given partital account name",
   "accountHaveStatsOnName": [
      " select distinct account_id, account_name, char_length(account_name) as len from account_has_stats ",
      " where lower(account_name) like %s order by char_length(account_name)"
   ],

   "_comments": "Query for getting stats products for a given user account",
   "getProductForAccount": [
      " select distinct ptg.name as product_name ",
      " from dc_stats_monthly_rollup dc, product_template_group ptg ",
      " where dc.stats_date >= '%s' and dc.stats_date < '%s' ",
      " and dc.acct_id = %d and ptg.id = dc.product_template_id"
   ],

   "_comments": "Query for getting domains for a given user account and product",
   "getDomainForProductAccount": [
      " select distinct ptg.domain from dc_stats_monthly_rollup dc, product_template_group ptg ",
      " where dc.stats_date >= '%s' and dc.stats_date < '%s' ",
      " and dc.acct_id = %d and ptg.id = dc.product_template_id and lower(ptg.name) = lower('%s') "
   ],

   "_comments": "Query for comparing year-over-year month stats of a given domain ",
   "yearOverYearProductMonthly": [

      " select dt.year, dt.month, coalesce(Document,0) as document  ",
      "        , coalesce(Media,0) as media  ",
      "        , coalesce(Queries,0) as queries  ",
      "        , coalesce(Workspace,0) as workspace  ",
      " FROM  ",
      " (  ",
      "   select yr.year, mn.month  ",
      "   from  ",
      "   (  ",
      "       SELECT distinct regexp_replace(cast(t.stats_date as text), '-[0-9]{2}-.*$', '') as year  ",
      "       FROM dc_stats_monthly_rollup t, product_template_group ptg  ",
      "       where   ",
      "       t.stats_date >= '%s' and t.stats_date < '%s' ",
      "       and t.product_template_id != -1  and t.acct_id != -1",
      "       and ptg.id = t.product_template_id  ",
      "       and ptg.name = '%s') yr,  ",
      "   (  SELECT '01' as month union  ",
      "      select '02' as month union  ",
      "      select '03' as month union  ",
      "      select '04' as month union  ",
      "      select '05' as month union  ",
      "      select '06' as month union  ",
      "      select '07' as month union  ",
      "      select '08' as month union  ",
      "      select '09' as month union  ",
      "      select '10' as month union  ",
      "      select '11' as month union  ",
      "      select '12' as month) mn  ",
      " ) dt  ",
      " left outer join  ",
      " (  ",
      "   select regexp_replace(regexp_replace(q.month, '[0-9]{4}-', ''), '-[0-9]{2}.*', '') as month,  ",
      "          regexp_replace(q.month, '-[0-9]{2}-.*$', '') as year,  ",
      "          q.Document, q.Media, q.Queries, q.Workspace  ",
      "   FROM  ",
      "   (  ",
      "     select p.month,  ",
      "       max(case when p.category = 'Documents' then p.count else 0 end) as Document,  ",
      "       max(case when p.category = 'Media' then p.count else 0 end) as Media,  ",
      "       max(case when p.category = 'Queries' then p.count else 0 end) as Queries,  ",
      "       max(case when p.category = 'Workspace' then p.count else 0 end) as Workspace  ",
      "     from  ",
      "     (  ",
      "       SELECT ptg.name as name , regexp_replace(cast(t.stats_date as text), '00.*$', '') as month  ",
      "              , c.name category, sum(t.stat_count) as count  ",
      "       FROM dc_stats_monthly_rollup t, product_template_group ptg, url_mapping m, web_stats_category c  ",
      "       where   ",
      "       t.stats_date >= '%s' and t.stats_date < '%s' ",
      "       and t.product_template_id != -1  and t.acct_id != -1",
      "       and ptg.id = t.product_template_id  ",
      "       and t.url_mapping_id = m.id  ",
      "       and m.category_id = c.id  ",
      "       and ptg.name = '%s' ",
      "       group by ptg.name, t.stats_date, c.name  ",
      "     ) p  ",
      "     group by p.month  ",
      "   ) q  ",
      " ) stats on (stats.month = dt.month and stats.year = dt.year)  ",
      " order by dt.year, dt.month "

   ],

   "_comments": "Get list of dmains associated with a product. Used for retrieving stats for account",
   "domainListForProductAccount": [
      " select ptg.domain, sum(dc.stat_count) ",
      " from dc_stats_daily_rollup dc, product_template_group ptg ",
      " where dc.stats_date >= ':start_date' and dc.stats_date < ':end_date' ",
      " and dc.acct_id = :account_id ",
      " and ptg.id = dc.product_template_id ",
      " and ptg.name = ':product_name' ",
      " group by ptg.domain ",
      " order by sum(dc.stat_count) desc "
   ],

   "_comments": "List of products an account access in given date range",
   "productListForAccount": [
       "  select name, sum(subtotal) as total, round(avg(subtotal), 1) as avg, min(subtotal) as min, max(subtotal) as max ",
       "  from ",
       "  ( ",
       "    select ptg.name, stats_date, sum(dc.stat_count) as subtotal ",
       "    from dc_stats_monthly_rollup dc,  ",
       "      ( ",
       "        select distinct ah.account_id from account_hier_expl ah ",
       "        where ah.account_id = %d or ah.parent_id = %d  ",
       "        or ah.grand_id = %d or ah.great_id = %d or ah.great2_id = %d ",
       "      ) ah, product_template_group ptg ",
       "    where product_template_id != -1 ",
       "    and stats_date >= '%s' and stats_date < '%s' ",
       "    and acct_id = ah.account_id ",
       "    and ptg.id = dc.product_template_id ",
       "    group by ptg.name, stats_date ",
       "  ) p ",
       "  group by name ",
       "  order by sum(subtotal) desc "
   ],

   "_comments": "Get stats for given product/domain for given user account within date range.",
   "statsForAccount": [
      " select p.*, Document + Media + Queries + Workspace as totalpageview ",
      " FROM ( ",
      "   select stats_date as month, ",
      "     max(case when category_name = 'Documents' then p.count else 0 end) as Document, ",
      "     max(case when category_name = 'Media' then p.count else 0 end) as Media, ",
      "     max(case when category_name = 'Queries' then p.count else 0 end) as Queries, ",
      "     max(case when category_name = 'Workspace' then p.count else 0 end) as Workspace ",
      "   FROM ",
      "   ( ",
      "     select coalesce(ptg.:column, '') as :column ",
      "        , coalesce(ct.name, '') as category_name ",
      "        , dc.stats_date ",
      "        , sum(dc.stat_count) as count ",
      "     from (select acct_id, regexp_replace(cast(stats_date as text), ' .*$', '') as stats_date,  ",
      "             stat_count, product_template_id, url_mapping_id from :rollup_table, ",
      "             (select distinct account_id from account_hier_expl where ",
      "                account_id = :account_id or parent_id = :account_id or grand_id = :account_id or ",
      "                great_id = :account_id or great2_id = :account_id) ah ",
      "             where stats_date >= ':start_date' and stats_date < ':end_date' ",
      "             and acct_id = ah.account_id ",
      "           ) dc ",
      "        , product_template_group ptg, url_mapping um, web_stats_category ct ",
      "     where stats_date >= ':start_date' and stats_date < ':end_date' ",
      "     and product_template_id != -1 ",
      "     and ptg.id = dc.product_template_id ",
      "     and dc.url_mapping_id = um.id ",
      "     and ptg.:column = ':pname' ",
      "     and um.category_id = ct.id ",
      "     group by ptg.:column, ct.name, dc.stats_date ",
      "   ) p ",
      "   group by stats_date ",
      " ) p ",
      " order by month "
   ],

   "_comments": "Year-Over-Year monthly stats for account. start_date, end_date, account_id, dName, column",
   "yoyStatsForAccount": [
      " select dt.year, dt.month, coalesce(Document,0) as document ",
      "        , coalesce(Media,0) as media ",
      "        , coalesce(Queries,0) as queries ",
      "        , coalesce(Workspace,0) as workspace ",
      " FROM ",
      " ( ",
      "   select yr.year, mn.month ",
      "   from ",
      "   ( ",
      "       SELECT distinct regexp_replace(cast(t.stats_date as text), '-[0-9]{2}-.*$', '') as year ",
      "       FROM dc_stats_monthly_rollup t, product_template_group ptg, ",
      "            (select distinct account_id from account_hier_expl where ",
      "                account_id = :account_id or parent_id = :account_id or grand_id = :account_id or ",
      "                great_id = :account_id or great2_id = :account_id) ah ",
      "       where  ",
      "       t.stats_date >= ':start_date' and t.stats_date < ':end_date' ",
      "       and t.product_template_id != -1 ",
      "       and t.acct_id = ah.account_id ",
      "       and ptg.id = t.product_template_id ",
      "       and ptg.:column = ':dName') yr, ",
      "   (  SELECT '01' as month union ",
      "      select '02' as month union ",
      "      select '03' as month union ",
      "      select '04' as month union ",
      "      select '05' as month union ",
      "      select '06' as month union ",
      "      select '07' as month union ",
      "      select '08' as month union ",
      "      select '09' as month union ",
      "      select '10' as month union ",
      "      select '11' as month union ",
      "      select '12' as month) mn ",
      " ) dt ",
      " left outer join ",
      " ( ",
      "   select regexp_replace(regexp_replace(q.month, '[0-9]{4}-', ''), '-[0-9]{2}.*', '') as month, ",
      "          regexp_replace(q.month, '-[0-9]{2}-.*$', '') as year, ",
      "          q.Document, q.Media, q.Queries, q.Workspace ",
      "   FROM ",
      "   ( ",
      "     select p.month, ",
      "       max(case when p.category = 'Documents' then p.count else 0 end) as Document, ",
      "       max(case when p.category = 'Media' then p.count else 0 end) as Media, ",
      "       max(case when p.category = 'Queries' then p.count else 0 end) as Queries, ",
      "       max(case when p.category = 'My Britannica' then p.count else 0 end) as Workspace ",
      "     from ",
      "     ( ",
      "       SELECT regexp_replace(cast(t.stats_date as text), '00.*$', '') as month ",
      "              , c.name category, sum(t.stat_count) as count ",
      "       FROM dc_stats_monthly_rollup t, product_template_group ptg, url_mapping m, web_stats_category c, ",
      "            (select distinct account_id from account_hier_expl where ",
      "                account_id = :account_id or parent_id = :account_id or grand_id = :account_id or ",
      "                great_id = :account_id or great2_id = :account_id) ah ",
      "       where  ",
      "       t.stats_date >= ':start_date' and t.stats_date < ':end_date' ",
      "       and t.product_template_id != -1 ",
      "       and ptg.id = t.product_template_id ",
      "       and t.url_mapping_id = m.id ",
      "       and m.category_id = c.id ",
      "       and t.acct_id = ah.account_id ",
      "       and ptg.:column = ':dName' ",
      "       group by t.stats_date, c.name ",
      "     ) p ",
      "     group by p.month ",
      "   ) q ",
      " ) stats on (stats.month = dt.month and stats.year = dt.year) ",
      " order by dt.year, dt.month "
    ],

   "_comments": "This create a temporary function. Subsequent calls should be in the same session.",
   "topLevelAccountFunction": [
      " CREATE FUNCTION pg_temp.topLevelAccount(accountId int) ",
      "   /* Get all accounts in the root account accountId */ ",
      "   returns table(acct_id bigint, account_name varchar, table_name text) as ",
      "   $$ ",
      "   DECLARE ",
      "   begin ",
      "      return query EXECUTE ",
      "       ' select distinct ah.account_id, ah.account_name, text ''table_'' || ah.account_id' || ",
      "       ' from account_hier_expl ah' || ",
      "       ' where ah.parent_id = ' || accountId; ",
      "   end; ",
      "   $$ LANGUAGE plpgsql "
    ],

   "createMonthTable": [
      " CREATE TEMP TABLE months ",
      " ( ",
      "   start_date varchar, ",
      "   end_date   varchar ",
      " ) "
    ],

   "insertMonthTable": [
      " insert into months ",
      "   select p.start_date, ",
      "     ( SELECT (date_trunc('month', p.start_date::date) +  ",
      "          interval '1 month' - interval '1 day')::date ) as end_date ",
      "   from ",
      "     ( select generate_series(date_trunc('month', '%s'::date) ,  ",
      "            '%s', interval '1 month')::date as start_date ) p "
    ],

   "_comments": "Get all descendant accounts in the given account ID including the given ID.",
   "functionAllAccountIn": [
      " CREATE FUNCTION pg_temp.allAccountIn(accountId int) ",
      "   returns table(acct_id bigint, account_name varchar) as ",
      "   $$ ",
      "   DECLARE ",
      "   begin ",
      "      return query EXECUTE ",
      "       ' select distinct ah.account_id, ah.account_name from account_hier_expl ah' || ",
      "       ' where ah.account_id = ' || accountId || ",
      "       ' OR ah.parent_id = ' || accountId || ",
      "       ' OR ah.grand_id = ' || accountId || ",
      "       ' OR ah.great_id = ' || accountId || ",
      "       ' OR ah.great2_id = ' || accountId; ",
      "   end; ",
      "  $$ LANGUAGE plpgsql; "
    ],

   "_comments": "Create temp table table_name to contain all descendants' accounts. ",
   "tableAllAccountIn": [
     " CREATE FUNCTION pg_temp.createTopLevelAccountTable(accountId bigint, table_name text) ",
     "   returns void as ",
     "   $$ ",
     "   DECLARE ",
     "   begin ",
     "       EXECUTE 'CREATE TEMP TABLE ' || table_name ||  ",
     "           ' as select * from pg_temp.allAccountIn(' || accountId || ')'; ",
     "   end; ",
     "  $$ LANGUAGE plpgsql; "
    ],

   "_comments": "Create a table containing immediate children of the given root account ID (%d). ",
   "topLevelAccount": [
      "CREATE TEMP TABLE top_level_account as select * from pg_temp.topLevelAccount(%d) "
    ],

   "_comments": "Create set of tables each per top_level_account, and contains all its descendants.",
   "topLevelAccountTable": [
      " CREATE TEMP TABLE not_use as ",
      "   select pg_temp.createTopLevelAccountTable(t.acct_id, t.table_name) || '1' from top_level_account t "
    ],

   "_comments": "create a table containing only the root account.",
   "rootAccountTable": [
      " CREATE TEMP TABLE root_account as ",
      "   select distinct ah.account_id as acct_id, ah.account_name from account_hier_expl ah ",
      "   where ah.account_id = (%d) "
    ],

   "_comments": "Insert root account into top_level_account.",
   "includeRootAccount": [
      " insert into top_level_account ",
      " select acct_id, account_name, 'root_account' as table_name from root_account "
    ],

   "_comments": "Get summary stats for all accounts in given top_table",
   "summaryStatsInRange": [
      " CREATE FUNCTION pg_temp.statsInDateRange(start_date text, end_date text, top_table text) ",
      "   returns table(acct_id bigint, account_name varchar, name varchar ",
      "                 , pname varchar, tname varchar ",
      "                 , month text, category varchar, count bigint) as ",
      "   $$ ",
      "   DECLARE ",
      "     productNames text; ",
      "     dtRange text; ",
      "   begin ",
      "     dtRange = '' || start_date || ''; ",
      "     productNames = ' (''britannica online school edition (se)*'', ",
      "                       ''britannica online school edition k-8/primary  (se)'', ",
      "                       ''britannica online academic edition (bolae)'',  ",
      "                       ''britannica escolar online (esclr)'', ",
      "                       ''enciclopedia moderna'') '; ",
      "      return query EXECUTE ",
      "       '  SELECT bn.acct_id, bn.account_name, ' || ",
      "       '     ptg.name as name, ptg.product_permission_name as pname, m.tier_name as tname, ' || ",
      "       '     text ''' || start_date || ''' as month, ' ||  ",
      "       '     c.name as category, CAST(sum(t.stat_count) as bigint) as count ' || ",
      "       '  FROM  ' || ",
      "       '     dc_stats_daily_rollup t, product_template_group ptg,  ' || ",
      "       '     url_mapping m, web_stats_category c, ' || top_table || ' bn ' || ",
      "       '  where t.stats_date between ''' || start_date || ''' and ' || ' ''' || end_date || ''' ' || ",
      "       '  and t.product_template_id != -1 ' || ",
      "       '  and ptg.id = t.product_template_id ' || ",
      "       '  and t.url_mapping_id = m.id ' || ",
      "       '  and m.category_id = c.id ' || ",
      "       '  and t.acct_id = bn.acct_id ' || ",
      "       '  and lower(ptg.name) in ' || productNames || ",
      "       '  group by bn.acct_id, bn.account_name, ptg.name,  ' || ",
      "       '     ptg.product_permission_name, m.tier_name, c.name '; ",
      "   end; ",
      "   $$ LANGUAGE plpgsql; "
    ],

   "_comments": "Create summary report table which contains requested data for requested top level accounts.",
   "summaryReportTable": [
       " CREATE TEMP TABLE summary_report as ",
       " select top_account_id as account_id, top_account_name as account_name    ",
       "     , name, pname, tname, month ",
       "     , sum(Document) as document, sum(Media) as media , sum(Queries) as queries ",
       "     , sum(Workspace) as workspace, sum(total_pg_view) as total_pg_view ",
       " from ",
       " ( ",
       "   select tp.acct_id as top_account_id  ",
       "     , tp.account_name  as top_account_name  ",
       "     , p.acct_id , p.account_name , p.name , p.pname , p.tname , p.month ",
       "     , max(case when p.category = 'Documents' then p.count else null end) as Document ",
       "     , max(case when p.category = 'Media' then p.count else null end) as Media ",
       "     , max(case when p.category = 'Queries' then p.count else null end) as Queries ",
       "     , max(case when p.category = 'Workspace' then p.count else null end) as Workspace ",
       "     , sum(p.count) as total_pg_view ",
       "   from top_level_account tp ",
       "     , months mn ",
       "     , pg_temp.statsInDateRange(mn.start_date, mn.end_date, tp.table_name) p ",
       "   group by tp.acct_id, tp.account_name, p.acct_id, p.account_name, p.pname, p.tname, p.name, p.month ",
       " ) q  ",
       " group by top_account_id, top_account_name, name, pname, tname, month"
     ],

   "getSummaryReport": [
      " select ",
      "   account_id",
      "   ,account_name",
      "   ,name as product_name",
      "   ,pname as permission_name",
      "   ,tname as Subcategory",
      "   ,month ",
      "   ,document",
      "   ,media",
      "   ,queries",
      "   ,workspace",
      "   ,total_pg_view",
      " from summary_report",
      " order by account_id, account_name, name, pname, tname, month"
     ],

   "rootAccountList": [
      " select distinct bt.acct_id, bt.account_name ",
      " from boat_account bt ",
      "      , (select distinct account_id from permission where status = 0) ah ",
      " where bt.parent_account_id is null ",
      " and bt.acct_id in ",
      " ( ",
      "   select parent_id from account_hier_expl ",
      "   union ",
      "   select grand_id from account_hier_expl ",
      "   union ",
      "   select great_id from account_hier_expl ",
      "   union ",
      "   select great2_id from account_hier_expl ",
      " ) ",
      " and bt.realism != 'INTERNAL' and acct_id != 0 ",
      " and bt.acct_id = ah.account_id "
     ],

   "testTopLevelAccountFunction": [
      " select * from pg_temp.topLevelAccount(%d)"
    ]
 }
]

